{"ast":null,"code":"import fetch from'unfetch';var checkStatus=function checkStatus(response){if(response.ok){return response;}// convert non-2xx HTTP responses into errors:\nvar error=new Error(response.statusText);error.response=response;return Promise.reject(error);};export var getAllStudents=function getAllStudents(){return fetch(\"api/v1/students\").then(checkStatus);};export var addNewStudent=function addNewStudent(student){return fetch(\"api/v1/students\",{headers:{'Content-Type':'application/json'},method:'POST',body:JSON.stringify(student)}).then(checkStatus);};export var deleteStudent=function deleteStudent(studentId){return fetch(\"api/v1/students/\".concat(studentId),{method:'DELETE'}).then(checkStatus);};","map":{"version":3,"sources":["/Users/marcosaraivadasilva/Documents/Workspace/fullstack_springboot_react/src/frontend/src/client.js"],"names":["fetch","checkStatus","response","ok","error","Error","statusText","Promise","reject","getAllStudents","then","addNewStudent","student","headers","method","body","JSON","stringify","deleteStudent","studentId"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,SAAlB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,QAAQ,CAAI,CAC5B,GAAIA,QAAQ,CAACC,EAAb,CAAiB,CACb,MAAOD,CAAAA,QAAP,CACH,CACD;AACA,GAAME,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAd,CACAF,KAAK,CAACF,QAAN,CAAiBA,QAAjB,CACA,MAAOK,CAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP,CACH,CARD,CAUA,MAAO,IAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAC1BT,CAAAA,KAAK,CAAC,iBAAD,CAAL,CACKU,IADL,CACUT,WADV,CAD0B,EAAvB,CAIP,MAAO,IAAMU,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,OAAO,QAChCZ,CAAAA,KAAK,CAAC,iBAAD,CAAoB,CACrBa,OAAO,CAAE,CACL,eAAgB,kBADX,CADY,CAIrBC,MAAM,CAAE,MAJa,CAKrBC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf,CALe,CAApB,CAAL,CAMGF,IANH,CAMQT,WANR,CADgC,EAA7B,CASP,MAAO,IAAMiB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,SAAS,QAClCnB,CAAAA,KAAK,2BAAoBmB,SAApB,EAAiC,CAClCL,MAAM,CAAE,QAD0B,CAAjC,CAAL,CAEGJ,IAFH,CAEQT,WAFR,CADkC,EAA/B","sourcesContent":["import fetch from 'unfetch';\n\nconst checkStatus = response => {\n    if (response.ok) {\n        return response;\n    }\n    // convert non-2xx HTTP responses into errors:\n    const error = new Error(response.statusText);\n    error.response = response;\n    return Promise.reject(error);\n}\n\nexport const getAllStudents = () =>\n    fetch(\"api/v1/students\")\n        .then(checkStatus);\n\nexport const addNewStudent = student =>\n    fetch(\"api/v1/students\", {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(student)\n    }).then(checkStatus);\n\nexport const deleteStudent = studentId =>\n    fetch(`api/v1/students/${studentId}`, {\n        method: 'DELETE'\n    }).then(checkStatus);\n\n"]},"metadata":{},"sourceType":"module"}